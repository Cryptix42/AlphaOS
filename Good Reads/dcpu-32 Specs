---------------------------------------------------------------------------------
Name: DCPU-32
Version: 1.1.0



=== SUMMARY =====================================================================

* 16-bit words, 32-bit dwords
* 0x20000 words of ram
* 8 16-bit registers (A, B, C, I, XH, XL, YH, YL)
* 2 32-bit (dword) registers (DX, DY)
   |- DX = ((XH << 16) | XL), same for DY but with YH and YL
* 2 32-bit IEEE floating point registers (FA, FB)
* extra/excess (EX)
* program counter (PC)
* stack pointer (SP)
* interrupt address (IA)

In this document, anything within [brackets] is shorthand for "the value of the
RAM at the location of the value inside the brackets". For example, SP means
stack pointer, but [SP] means the value of the RAM at the location the stack
pointer is pointing at.

Whenever the CPU needs to read a word, it reads [PC], then increases PC by one.
Shorthand for this is [PC++]. In some cases, the CPU will modify a value before
reading it, in this case the shorthand is [++PC].

The DCPU-32 is intended to closely resemble the DCPU-16 inorder to make the 
migration between the systems as easy as possible. However, for security and 
additional protection from accidental harm, it is recommended that all DCPU-32 
applications use big endian wherever possible.


=== RAM SEGMENTS ================================================================

The DCPU-32 has twice the ram of the DCPU-16, but the same size pointers. To 
make up for this the ram has been segmented into two parts: the high ram, and the
low ram. Pointers (PC, SP, IA) always point to an address in the current segment.

DCPU-32 PC always starts in the low segment. You can easily switch between the 
high and low segments with the operators "HSG", "LSG", "MOVH", and "MOVL"


=== INSTRUCTIONS ================================================================

Instructions are 1-4 words long and are fully defined by the first word. There
are multiple formats for the first word, where o are operator bits and other
letters are bits that correspond with values in the table below. The values are 
always handled by the processor from left to right.
Basic  : 1oooooaaaabbbbbb
Float  : 01ooooaaaabbbbbb
Load   : 001obbbbbbcccccc
Special: 0001oooooocccccc
Binary : 00001ooooooooooo



In the tables below, C is the time required (a hexadecimal number) in cycles to
look up the value or perform the opcode, VALUE is the numerical value, NAME is
the mnemonic, and DESCRIPTION is a short text that describes the opcode or value.


--- VALUES ----------------------------------------------------------------------

This table is split by the amount of bits avaliable, but all values are valid for 
all parameters (0x0f will be used if necessary).

--- A Values: (4 bits) ----------------------------------------------------------
 C | VALUE     | DESCRIPTION
---+-----------+-----------------------------------------------------------------
 0 | 0x00-0x07 | 16-bit register (A, B, C, I, XH, XL, YH, or YL, in that order)
 0 | 0x08-0x0b | 32-bit register (DX, DY, FA, or FB)
 0 |      0x0c | (PUSH / [--SP]) if first parameter, or (POP / [SP++]) if second
 1 |      0x0d | [SP + next word] / PICK n
 0 |      0x0e | [SP] / PEEK
 1+|      0x0f | defined by next word
 
 --- B/C Values: (6 bits) -------------------------------------------------------
 0 | 0x10-0x17 | [16-bit register]
 1 | 0x18-0x1f | [16-bit register + next word]
 1 |      0x20 | next word (literal)
 0 |      0x21 | EX
 0 |      0x22 | PC
 0 |      0x23 | SP
 1 |      0x24 | [next word]
 0 |      0x25 | literal value 0xffff (-1)
 0 | 0x26-0x35 | literal value 0x0..0xf (0..15)
 0 | 0x36-0x3f | literal value 2^(4..13)
 --+-----------+----------------------------------------------------------------
 
 * B/C values can be used in place of an A value because the compiler will
   convert it to 0x0f. "defined by next word" (0x0f) increases the word length
   of the instruction by 1 and always takes at least one additional cycle to 
   look up the value.
 
* "next word" means "[PC++]". Increases the word length of the instruction by 1.

* By using 0x0c, 0x0d, 0x0e as POP/PUSH, PICK, and PEEK there's a reverse stack
  starting at memory location 0xffff in the stack ram segment. 
  Example: "SET PUSH, 10", "SET X, POP"

* There are special opcodes for altering pointers (PC, SP, and IA)
 
 
--- OPCODES ---------------------------------------------------------------------

* Opcodes are split by type as defined above.

* With the built-in compiler all values are case-insensitive, and all values that
  do not fit within within the specified number of bits will automatically be
  converted to "defined by next word" (0x0f).
   
 
--- Basic opcodes: (5 bits; param a, b) -----------------------------------------
 C | VAL  | NAME     | DESCRIPTION
---+------+----------+-----------------------------------------------------------
 2+| 0x00 | IFB a, b | performs next instruction only if (a&b)!=0
 2+| 0x01 | IFC a, b | performs next instruction only if (a&b)==0
 2+| 0x02 | IFE a, b | performs next instruction only if a==b 
 2+| 0x03 | IFN a, b | performs next instruction only if a!=b 
 2+| 0x04 | IFG a, b | performs next instruction only if a>b 
 2+| 0x05 | IFA a, b | performs next instruction only if a>b (signed)
 2+| 0x06 | IFL a, b | performs next instruction only if a<b 
 2+| 0x07 | IFU a, b | performs next instruction only if a<b (signed)
 - | 0x08 | -        |
 2 | 0x09 | STI a, b | sets a to b, then increases I by 1
 2 | 0x0a | STD a, b | sets a to b, then decreases I by 1
 2 | 0x0b | ADD a, b | sets a to a+b (unsigned), sets EX to ((a+b)>>16)&0xffff
 2 | 0x0c | SUB a, b | sets a to a-b (unsigned), sets EX to ((a-b)>>16)&0xffff
 2 | 0x0d | MUL a, b | sets a to a*b, sets EX to ((a*b)>>16)&0xffff
 2 | 0x0e | MLI a, b | like MUL, but treat a, b as signed
 F | 0x0f | DIV a, b | sets a to a/b, sets EX to ((a<<16)/b)&0xffff. if b==0,
   |      |          | sets a and EX to 0 instead. (unsigned)
 F | 0x10 | DVI a, b | like DIV, but treat a, b as signed. Rounds towards 0
 8 | 0x11 | MOD a, b | sets a to a%b. if b==0, sets a to 0 instead.
 8 | 0x12 | MDI a, b | like MOD, but treat a, b as signed. (MDI -7, 16 == -7)
 1 | 0x13 | AND a, b | sets a to a&b
 1 | 0x14 | BOR a, b | sets a to a|b
 1 | 0x15 | XOR a, b | sets a to a^b
 1 | 0x16 | SHR a, b | sets a to a>>>b, sets EX to ((a<<16)>>b)&0xffff 
   |      |          | (logical shift)
 1 | 0x17 | ASR a, b | sets a to a>>b, sets EX to ((a<<16)>>>b)&0xffff 
   |      |          | (arithmetic shift) (treats a as signed)
 1 | 0x18 | SHL a, b | sets a to a<<b, sets EX to ((a<<b)>>16)&0xffff
 - | 0x19 | -        |
 3 | 0x1a | ADX a, b | sets a to a+b+EX, sets EX to ((a+b+EX)>>16)&0xffff
 3 | 0x1b | SBX a, b | sets a to a-b+EX, sets EX to ((a-b+EX)>>16)&0xffff
 - | 0x1d | -        |
 - | 0x1e | -        |
 - | 0x1f | -        |
---+------+----------+-----------------------------------------------------------

* The conditional opcodes take one cycle longer to perform if the test fails.
  When they skip a conditional instruction, they will skip an additional
  instruction at the cost of one extra cycle. This continues until a non-
  conditional instruction has been skipped. This lets you easily chain
  conditionals. Interrupts are not triggered while the DCPU-32 is skipping.

* Floating point values (FA, FB) will be rounded towards zero by these opcodes. If
  you wish to keep the decimal value and the proper sign use the float opcodes.

* If a is a float register the result will be stored as a float, otherwise it will 
  be rounded towards zero.

* Signed numbers are represented using two's complement.



--- Float opcodes: (4 bits; param a, b) -----------------------------------------
 C | VAL  | NAME      | DESCRIPTION
---+------+-----------+----------------------------------------------------------
 2 | 0x00 | FADD a, b | sets a to a+b
 2 | 0x01 | FSUB a, b | sets a to a-b
 2 | 0x02 | FMUL a, b | sets a to a*b
 F | 0x03 | FDIV a, b | sets a to a/b. if b==0, sets a to 0 instead.
 8 | 0x04 | FMOD a, b | sets a to a%b (FMOD -7.5, 16 == -7.5). if b==0, sets a
   |      |           | to 0 instead.
 - | 0x05 | -         |
 2+| 0x06 | FIFE a, b | performs next instruction only if a==b
 2+| 0x07 | FIFN a, b | performs next instruction only if a!=b
 2+| 0x08 | FIFG a, b | performs next instruction only if a>b
 2+| 0x09 | FIFL a, b | performs next instruction only if a<b
 - | 0x0a | -         |
 2+| 0x0b | FSET a, b | sets a to b, treats a, b as a float
 - | 0x0c | -         |
 - | 0x0d | -         |
 - | 0x0e | -         |
 - | 0x0f | -         | 
---+------+-----------+----------------------------------------------------------
 
* All float opcodes are signed.

* The operation "FADD FA, [0x3000]" will load a 16-bit signed integer value from the
  address 0x3000, not a float value. You must use two float registers to add two 
  floating point values. Load a float value from ram with "FSET FB, [0x3000]".
  Reading/writing ram with FSET takes an extra cycle.
  
* Any value can be used with float opcodes, the only difference between these and
  basic opcodes is that the input values are not rounded.



--- Load opcodes: (1 bit; param b, c) -------------------------------------------
 C | VAL  | NAME      | DESCRIPTION
---+------+-----------+----------------------------------------------------------
 1 | 0x00 | SET b, c  | sets b to c
 2+| 0x01 | DSET b, c | sets b to c, treats b, c as a dword (32-bit integer). To
   |      |           | load a float value see FSET, a float opcode.
---+------+-----------+----------------------------------------------------------

* When using DSET, if c is only 16-bits only the lowest 16-bits of b are modified.

* If b can not store a dword, the highest 16 bits of c are discarded.

* Using DSET to read/write ram will read/write a big endian dword starting at c.
  Loading from ram with DSET takes an extra cycle.
  
* Attempting to write to a literal value fails silently



--- Special opcodes: (6 bits; param c) ------------------------------------------
 C | VAL  | NAME   | DESCRIPTION
---+------+--------+-------------------------------------------------------------
 3 | 0x00 | JSR c  | pushes the address of the next instruction to the stack,
   |      |        | then sets PC to c
 7 | 0x01 | CALL c | pushes the address of the next instruction to the stack, push
   |      |        | all eight 16-bit registers (PUSHA), and finally sets PC to c
 - | 0x02 |        |
 - | 0x03 | -      |
 4 | 0x04 | MOVH c | move to the high segment, then push the address of the next
   |      |        | instruction, then push 0x0 if started in the low segment or
   |      |        | 0x1 if started in the high segment, finally set PC to c
 4 | 0x05 | MOVL c | same as MOVH but moves to the low segment
 4 | 0x06 | MOVT c | same as MOVH but moves to the segment you are not currently in
 - | 0x07 | -      |
 - | 0x08 | -      |
 - | 0x09 | -      |
 - | 0x0a | -      |
 1 | 0x0b | PCS c  | sets PC to c (alias: MOV)
 1 | 0x0c | SPS c  | sets SP to c
 - | 0x0d | -      |
 1 | 0x0f | IAS c  | sets IA to c 
 1 | 0x10 | IAG c  | sets c to IA
   | 0x11 | -      |
 4 | 0x12 | INT c  | triggers a software interrupt with message c
 3 | 0x13 | RFI c  | disables interrupt queueing, pops A from the stack, then 
   |      |        | pops PC from the stack
 2 | 0x14 | IAQ c  | if c is nonzero, interrupts will be added to the queue
   |      |        | instead of triggered. if c is zero, interrupts will be
   |      |        | triggered as normal again
 - | 0x15 | -      |
 2 | 0x16 | HWN c  | sets c to number of connected hardware devices
 4 | 0x17 | HWQ c  | sets DX, DY, and C registers to information about hardware c
   |      |        | DX is c 32 bit dword identifying the hardware id
   |      |        | DY is c 32 bit dword identifying the manufacturer
   |      |        | C is c 16 bit word for the hardware version
 4+| 0x18 | HWI c  | sends an interrupt to hardware c
 - | 0x19 | -      |
 - | 0x1a | -      |
 - | 0x1b | -      |
 - | 0x1c | -      |
 - | 0x1d | -      |
 - | 0x1e | -      |
 - | 0x1f | -      |
---+------+--------+-------------------------------------------------------------

* The number (0x0 or 0x1) pushed onto the stack by MOVH, MOVL, and MOVT is used 
  by POPSG to determine which segment to return to.



--- Binary opcodes: (11 bits) ---------------------------------------------------
 C | VAL  | NAME  | DESCRIPTION
---+------+-------+--------------------------------------------------------------
 - | 0x00 | -     |
 1+| 0x01 | IFEX  | performs next instruction only if EX != 0
 - | 0x02 | -     |
 - | 0x03 | -     |
 3 | 0x04 | POPSG | pops PC from the stack, then pops another word. if that word is
   |      |       | 0x0 move to the low segment, otherwise move to the high segment
 1 | 0x05 | HSG   | move to the high segment
 1 | 0x06 | LSG   | move to the low segment
 - | 0x07 | -     |
 1 | 0x08 | HNG   | sets PC to PC - 1, intern hanging the code
 - | 0x09 | -     |
 - | 0x0a | -     |
 4 | 0x0b | PUSHA | push 16-bit registers to stack (A, B, C, XH, XL, YH, YL, and I)
 4 | 0x0c | POPA  | pop 16-bit registers from stack (I, YL, YH, XL, HX, C, B, and A)
 - | 0x0d | -     |
 - | 0x0e | -     |
 - | 0x0f | -     |
 - | 0x10 | -     |
 - | 0x11 | -     |
 - | 0x12 | -     |
 - | 0x13 | -     |
 - | 0x14 | -     |
 - | 0x15 | -     |
 - | 0x16 | -     |
 - | 0x17 | -     |
 - | 0x18 | -     |
 - | 0x19 | -     |
 - | 0x1a | -     |
 - | 0x1b | -     |
 - | 0x1c | -     |
 - | 0x1d | -     |
 - | 0x1e | -     |
 - | 0x1f | -     | unimplemented past here
---+------+-------+--------------------------------------------------------------

* Just like basic conditionals, binary conditionals take one cycle longer if the
  test fails. They can also be chained like basic conditionals.
  

=== INTERRUPTS ==================================================================

The DCPU-32 will perform at most one interrupt between each instruction. If
multiple interrupts are triggered at the same time, they are added to a queue.
If the queue grows longer than 256 interrupts, the DCPU-32 will catch fire. 

When IA is set to something other than 0, interrupts triggered on the DCPU-32
will turn on interrupt queueing, push PC to the stack, followed by pushing A to
the stack, then set the PC to IA, and A to the interrupt message.
 
If IA is set to 0, a triggered interrupt does nothing. Software interrupts still
take up four clock cycles, but immediately return, incoming hardware interrupts
are ignored. Note that a queued interrupt is considered triggered when it leaves
the queue, not when it enters it.

Interrupt handlers should end with RFI, which will disable interrupt queueing
and pop A and PC from the stack as a single atomic instruction.
IAQ is normally not needed within an interrupt handler, but is useful for time
critical code.



=== HARDWARE ==================================================================== 

The DCPU-32 supports up to 65535 connected hardware devices, attempting to
connect more than that will cause it to catch fire. These devices can be 
anything from additional storage, monitors, processors or speakers. How to control 
the hardware is specified per hardware device, but the DCPU-32 supports a standard 
enumeration method for detecting connected hardware via the HWN, HWQ and HWI 
instructions.

The first five hardware pins are reserved by the DCPU-32. When it starts up it
will automatically query the connected hardware and reroute the first hardware it
finds of the given type to the specified pin: monitor - 0, keyboard - 1, clock - 2,
hard drive - 3, modem - 4.

Interrupts sent to hardware can't contain messages, can take additional cycles,
and can read or modify any registers or memory adresses on the DCPU-32. This
behavior changes per hardware device and is described in the hardware's
documentation.

The DPCU-32 does not support hot swapping hardware. The behavior of connecting
or disconnecting hardware while the DCPU-32 is running is undefined.
