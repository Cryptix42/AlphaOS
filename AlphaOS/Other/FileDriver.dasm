; *************************
; Project: AlphaOS
; File: FileDriver.dasm
; *************************
;Param A and B. 
;If A is 0 load root from media_ready or media_ready_WP floppy drive chosen by B.
;If A is 1 then load object from loaded table(file, folder, extension).
:fd_load 

set pc, pop

;Param A. 
;If A is 0, then wipe table ram and table vars.
;If A is 1, then wipe file and file extension allocation and all file vars.
:fd_unload 
ife a, 0
jsr fd_unload_table
ife a, 1
jsr fd_unload_file
set pc, pop

;Param A. 
;If A is 0, then save table to origin sector.
;If A is 1 then save file to disk sequentially (and then the extention if it has one).
;If A is 3, then overwrite file onto a filespace from the table.
;If A is 4, then save loaded folder table sequentially onto a filespace from the table (file and filespace must be equal in size or it will generate an error). 
:fd_save 

set pc, pop

;Param A. 
;Labels the file chosen by A on the loaded table to a sequence of empty sectors.
:fd_delete 

set pc, pop

;Param A and B. 
;If A is 0, then move the file data of file B from the loaded table to the folder specified by C in the table
;If A is 1, then move the file data of file B to the root table.
:fd_move 

set pc, pop

;Param A and B. 
;If A is 0, then set B to the location of the chosen folder name (see JAR filesystem Specs for info on folder names), and his will unload the currently loaded folder and create a new one.
;If A is 1, then set B to the location of the chosen file name (see JAR filesystem Specs for info on file names), and his will unload the currently loaded file and create a new one.
:fd_create 

set pc, pop

;Param A, B, and C. 
;Set A to the object on the table and it will return the name of the file/folder to location B and the file/folder-table length to the location in C.
;If there is no table loaded then it will return the root name of the disk in a state: media_ready or media_ready_WP drive chosen by A to location B with the root's length to location C.
:fd_filename 

set pc, pop

:table
dat 0,0
:table_filedata
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
:table_owner dat 0
:table_WP_flag dat 0
:table_type dat 0 
:table_origin_sector dat 0

:current_loaded_filetype   dat 0xfff0 ;magic number
:current_loaded_filelength dat 0x0000 ;in sectors

:useful_sector
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

;///////SUBROUTINES////////
:fd_table_search_folder
set push, i
set push, j
set i, 0
set j, table
:table_search_folder_loop
add j, 2
add i, 1
ife [j], 0xfff1
add i, 1
ifn i, a
set pc, table_search_folder_loop
set a, j
set j, pop
set i, pop
set pc, pop

:fd_table_search_file
set push, i
set push, j
set i, 0
set j, table
:table_search_file_loop
add j, 2
add i, 1
ifl [j], 0xfff0
add i, 1
ifn i, a
set pc, table_search_file_loop
set a, j
set j, pop
set i, pop
set pc, pop

:fd_get_folder_name
set push, a
set push, b
set a, [a+1]
and a, 0b1111111111100000
shr a, 5
set b, useful_sector
jsr m35fd_sector_read
set [c], [useful_sector]
and [c], 0xff00
shr [c], 8
set [c+1], [useful_sector]
and [c+1], 0x00ff
set [c+2], [useful_sector+1]
and [c+2], 0xff00
shr [c+2], 8
set [c+3], [useful_sector+1]
and [c+3], 0x00ff
set a, c
add a, 15
set b, 28
set c, 0x20
jsr memory_fill
set b, pop
set a, pop
set pc, pop

:fd_get_file_name
set push, a
set push, b
set push, c
set a, [a+1]
and a, 0b1111111111100000
shr a, 5
set b, useful_sector
jsr m35fd_sector_read
set [c], [useful_sector]
and [c], 0xff00
shr [c], 8
set [c+1], [useful_sector]
and [c+1], 0x00ff
set [c+2], [useful_sector+1]
and [c+2], 0xff00
shr [c+2], 8
set [c+3], [useful_sector+1]
and [c+3], 0x00ff
set [c+4], [useful_sector+2]
and [c+4], 0xff00
shr [c+4], 8
set [c+5], [useful_sector+2]
and [c+5], 0x00ff
set [c+6], [useful_sector+3]
and [c+6], 0xff00
shr [c+6], 8
set [c+7], [useful_sector+3]
and [c+7], 0x00ff
set [c+8], [useful_sector+4]
and [c+8], 0xff00
shr [c+8], 8
set [c+9], [useful_sector+4]
and [c+9], 0x00ff
set [c+10], [useful_sector+5]
and [c+10], 0xff00
shr [c+10], 8
set [c+11], [useful_sector+5]
and [c+11], 0x00ff
set [c+12], [useful_sector+6]
and [c+12], 0xff00
shr [c+12], 8
set [c+13], [useful_sector+6]
and [c+13], 0x00ff
set [c+14], [useful_sector+7]
and [c+14], 0xff00
shr [c+14], 8
set [c+15], [useful_sector+7]
and [c+15], 0x00ff
set a, c
add a, 15
set b, 16
set c, 0x20
jsr memory_fill
set c, pop
set b, pop
set a, pop
set pc, pop

:fd_unload_table;Wipes the currently loaded folder from memory.
set push, a
set push, b
set push, c
set c, 0
set a, table
set b, table_origin_sector
sub b, table
jsr memory_fill
set [table_owner], 0xffff
set [table_origin_sector], 0xffff
set c, pop
set b, pop
set a, pop
set pc, pop

:fd_unload_file;Wipes the currently loaded file from memory.
set push, a
set push, b
set push, c
set c, 0
set a, 0
set b, file_end
jsr memory_fill
set [current_loaded_filetype], 0xfff0
set [current_loaded_filelength], 0
set c, pop
set b, pop
set a, pop
set pc, pop